# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gtlib_swig', [dirname(__file__)])
        except ImportError:
            import _gtlib_swig
            return _gtlib_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_gtlib_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gtlib_swig = swig_import_helper()
    del swig_import_helper
else:
    import _gtlib_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gtlib_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _gtlib_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _gtlib_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _gtlib_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _gtlib_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _gtlib_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _gtlib_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _gtlib_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _gtlib_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gtlib_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gtlib_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gtlib_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class gtlib_bfsk_modulator_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gtlib_bfsk_modulator_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gtlib_bfsk_modulator_fc_sptr
        __init__(self,  p) -> gtlib_bfsk_modulator_fc_sptr
        """
        this = _gtlib_swig.new_gtlib_bfsk_modulator_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr___deref__(self)

    __swig_destroy__ = _gtlib_swig.delete_gtlib_bfsk_modulator_fc_sptr
    __del__ = lambda self : None;
    def set_sensitivity(self, *args, **kwargs):
        """
        set_sensitivity(self, double sensitivity_a, double sensitivity_b)

        Params: (sensitivity_a, sensitivity_b)
        """
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_set_sensitivity(self, *args, **kwargs)

    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_check_topology(self, *args, **kwargs)

gtlib_bfsk_modulator_fc_sptr_swigregister = _gtlib_swig.gtlib_bfsk_modulator_fc_sptr_swigregister
gtlib_bfsk_modulator_fc_sptr_swigregister(gtlib_bfsk_modulator_fc_sptr)

gtlib_bfsk_modulator_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def bfsk_modulator_fc(*args, **kwargs):
  """
    bfsk_modulator_fc(double sensitivity_a, double sensitivity_b) -> gtlib_bfsk_modulator_fc_sptr

    Frequency modulator block

    float input; complex baseband output.

    Params: (sensitivity_a, sensitivity_b)
    """
  return _gtlib_swig.bfsk_modulator_fc(*args, **kwargs)
class gtlib_ncbfsk_freq_diversity_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gtlib_ncbfsk_freq_diversity)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gtlib_ncbfsk_freq_diversity_sptr
        __init__(self,  p) -> gtlib_ncbfsk_freq_diversity_sptr
        """
        this = _gtlib_swig.new_gtlib_ncbfsk_freq_diversity_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr___deref__(self)

    __swig_destroy__ = _gtlib_swig.delete_gtlib_ncbfsk_freq_diversity_sptr
    __del__ = lambda self : None;
    def forecast(self, *args, **kwargs):
        """
        forecast(self, int noutput_items, gr_vector_int ninput_items_required)

        Params: (noutput_items, ninput_items_required)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_forecast(self, *args, **kwargs)

    def general_work(self, *args, **kwargs):
        """
        general_work(self, int noutput_items, gr_vector_int ninput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, ninput_items, input_items, output_items)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_general_work(self, *args, **kwargs)

    def set_msequence_code(self, *args, **kwargs):
        """
        set_msequence_code(self, string msequence_code) -> bool

        Params: (msequence_code)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_set_msequence_code(self, *args, **kwargs)

    def parabolic_peak_interpolation(self, *args, **kwargs):
        """
        parabolic_peak_interpolation(self, float d1, float d2, float d3) -> float

        Params: (d1, d2, d3)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_parabolic_peak_interpolation(self, *args, **kwargs)

    def SPADE_func(self, *args, **kwargs):
        """
        SPADE_func(self, unsigned int spade_int, float spade_frac)

        Params: (spade_int, spade_frac)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_SPADE_func(self, *args, **kwargs)

    def unlock(self):
        """
        unlock(self)

        Params: ()
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_unlock(self)

    def mean_estimator(self, *args, **kwargs):
        """
        mean_estimator(self, float data) -> float

        Params: (data)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_mean_estimator(self, *args, **kwargs)

    def peak_estimator(self, *args, **kwargs):
        """
        peak_estimator(self, float data) -> float

        Params: (data)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_peak_estimator(self, *args, **kwargs)

    def config_timestamp(self, *args, **kwargs):
        """
        config_timestamp(self, long timestamp_gap)

        Params: (timestamp_gap)
        """
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_config_timestamp(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_check_topology(self, *args, **kwargs)

gtlib_ncbfsk_freq_diversity_sptr_swigregister = _gtlib_swig.gtlib_ncbfsk_freq_diversity_sptr_swigregister
gtlib_ncbfsk_freq_diversity_sptr_swigregister(gtlib_ncbfsk_freq_diversity_sptr)

gtlib_ncbfsk_freq_diversity_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

MAX_SPS = _gtlib_swig.MAX_SPS
MAX_DIVERSITY_ORDER = _gtlib_swig.MAX_DIVERSITY_ORDER
MAX_SEQUENCE_LENGTH = _gtlib_swig.MAX_SEQUENCE_LENGTH
MAX_SEQUENCE_PADDING = _gtlib_swig.MAX_SEQUENCE_PADDING

def ncbfsk_freq_diversity(*args, **kwargs):
  """
    ncbfsk_freq_diversity(int sps, float gamma, string msequence_code, int threshold) -> gtlib_ncbfsk_freq_diversity_sptr

    Params: (sps, gamma, msequence_code, threshold)
    """
  return _gtlib_swig.ncbfsk_freq_diversity(*args, **kwargs)
class gtlib_framer_sink_2_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gtlib_framer_sink_2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gtlib_framer_sink_2_sptr
        __init__(self,  p) -> gtlib_framer_sink_2_sptr
        """
        this = _gtlib_swig.new_gtlib_framer_sink_2_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr___deref__(self)

    __swig_destroy__ = _gtlib_swig.delete_gtlib_framer_sink_2_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _gtlib_swig.gtlib_framer_sink_2_sptr_work(self, *args, **kwargs)

    def meta_header(self, *args, **kwargs):
        """
        meta_header(self, long idx) -> unsigned int

        Params: (idx)
        """
        return _gtlib_swig.gtlib_framer_sink_2_sptr_meta_header(self, *args, **kwargs)

    def meta_rssi(self, *args, **kwargs):
        """
        meta_rssi(self, long idx) -> unsigned long

        Params: (idx)
        """
        return _gtlib_swig.gtlib_framer_sink_2_sptr_meta_rssi(self, *args, **kwargs)

    def meta_rtg(self, *args, **kwargs):
        """
        meta_rtg(self, long idx) -> unsigned long long

        Params: (idx)
        """
        return _gtlib_swig.gtlib_framer_sink_2_sptr_meta_rtg(self, *args, **kwargs)

    def meta_sps(self, *args, **kwargs):
        """
        meta_sps(self, long idx) -> double

        Params: (idx)
        """
        return _gtlib_swig.gtlib_framer_sink_2_sptr_meta_sps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gtlib_swig.gtlib_framer_sink_2_sptr_check_topology(self, *args, **kwargs)

gtlib_framer_sink_2_sptr_swigregister = _gtlib_swig.gtlib_framer_sink_2_sptr_swigregister
gtlib_framer_sink_2_sptr_swigregister(gtlib_framer_sink_2_sptr)

gtlib_framer_sink_2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

WLSQ_MAX = _gtlib_swig.WLSQ_MAX
STF_M_LENGTH = _gtlib_swig.STF_M_LENGTH
META_MAX = _gtlib_swig.META_MAX
class t_pktmeta(object):
    """Proxy of C++ t_pktmeta class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    header = _swig_property(_gtlib_swig.t_pktmeta_header_get, _gtlib_swig.t_pktmeta_header_set)
    rssi = _swig_property(_gtlib_swig.t_pktmeta_rssi_get, _gtlib_swig.t_pktmeta_rssi_set)
    rtg = _swig_property(_gtlib_swig.t_pktmeta_rtg_get, _gtlib_swig.t_pktmeta_rtg_set)
    sps = _swig_property(_gtlib_swig.t_pktmeta_sps_get, _gtlib_swig.t_pktmeta_sps_set)
    def __init__(self): 
        """__init__(self) -> t_pktmeta"""
        this = _gtlib_swig.new_t_pktmeta()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gtlib_swig.delete_t_pktmeta
    __del__ = lambda self : None;
t_pktmeta_swigregister = _gtlib_swig.t_pktmeta_swigregister
t_pktmeta_swigregister(t_pktmeta)

class t_wlsq_stack(object):
    """Proxy of C++ t_wlsq_stack class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    index = _swig_property(_gtlib_swig.t_wlsq_stack_index_get, _gtlib_swig.t_wlsq_stack_index_set)
    bit_cnt = _swig_property(_gtlib_swig.t_wlsq_stack_bit_cnt_get, _gtlib_swig.t_wlsq_stack_bit_cnt_set)
    stack = _swig_property(_gtlib_swig.t_wlsq_stack_stack_get, _gtlib_swig.t_wlsq_stack_stack_set)
    bit = _swig_property(_gtlib_swig.t_wlsq_stack_bit_get, _gtlib_swig.t_wlsq_stack_bit_set)
    def __init__(self): 
        """__init__(self) -> t_wlsq_stack"""
        this = _gtlib_swig.new_t_wlsq_stack()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gtlib_swig.delete_t_wlsq_stack
    __del__ = lambda self : None;
t_wlsq_stack_swigregister = _gtlib_swig.t_wlsq_stack_swigregister
t_wlsq_stack_swigregister(t_wlsq_stack)


def framer_sink_2(*args, **kwargs):
  """
    framer_sink_2(int sfo, gr_msg_queue_sptr target_queue, bool complementary_header) -> gtlib_framer_sink_2_sptr

    Given a stream of bits and access_code flags, assemble packets.

    input: stream of bytes from gr_correlate_access_code_bb output: none. Pushes assembled packet into target queue.

    The framer expects a fixed length header of 2 16-bit shorts containing the payload length, followed by the payload. If the 2 16-bit shorts are not identical, this packet is ignored. Better algs are welcome.

    The input data consists of bytes that have two bits used. Bit 0, the LSB, contains the data bit. Bit 1 if set, indicates that the corresponding bit is the the first bit of the packet. That is, this bit is the first one after the access code.

    Params: (sfo, target_queue, complementary_header)
    """
  return _gtlib_swig.framer_sink_2(*args, **kwargs)
class gtlib_receiver_monitor_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gtlib_receiver_monitor)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gtlib_receiver_monitor_sptr
        __init__(self,  p) -> gtlib_receiver_monitor_sptr
        """
        this = _gtlib_swig.new_gtlib_receiver_monitor_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr___deref__(self)

    __swig_destroy__ = _gtlib_swig.delete_gtlib_receiver_monitor_sptr
    __del__ = lambda self : None;
    def general_work(self, *args, **kwargs):
        """
        general_work(self, int noutput_items, gr_vector_int ninput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, ninput_items, input_items, output_items)
        """
        return _gtlib_swig.gtlib_receiver_monitor_sptr_general_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gtlib_swig.gtlib_receiver_monitor_sptr_check_topology(self, *args, **kwargs)

gtlib_receiver_monitor_sptr_swigregister = _gtlib_swig.gtlib_receiver_monitor_sptr_swigregister
gtlib_receiver_monitor_sptr_swigregister(gtlib_receiver_monitor_sptr)

gtlib_receiver_monitor_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def receiver_monitor():
  """
    receiver_monitor() -> gtlib_receiver_monitor_sptr

    <+description+>

    Params: (NONE)
    """
  return _gtlib_swig.receiver_monitor()


